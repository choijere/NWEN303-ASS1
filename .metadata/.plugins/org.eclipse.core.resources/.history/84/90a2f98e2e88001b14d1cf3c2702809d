package ass1;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class MParallelSorter1 implements Sorter {
	//Credit to this different design from Stack overflow
	//Source: https://stackoverflow.com/questions/34783815/java-recursive-mergesort-for-arraylists/34825244
	
	private static final ExecutorService executor = Executors.newCachedThreadPool();
	
	@Override
	public <T extends Comparable<? super T>> List<T> sort(List<T> list) {
		//First...
		List<T> result = new ArrayList<T>();
		result.addAll(list);
		
		//give to Sequential if less than 20 elements
		if(result.size() > 20) {
			MSequentialSorter s = new MSequentialSorter();
			result = s.sort(result);
		}
		//Now, for the parallel sorting magic!
		else {
			//Initial starting indexes.
			int left = 0;
			int right = result.size() - 1;
			
			//Begin recursive sort!
			result = sorting(result, left, right);
		}
		
		return result;
	}
	
	/**
	 * Sorts recursively
	 * @param list	The list that needs sorting.
	 * @param left	left index.
	 * @param right	right index.
	 */
	private <T extends Comparable<? super T>> List<T> sorting(List<T> list, int left, int right) {
		List<T> result = new ArrayList<T>();
		result.addAll(list);
		
		if(left < right) {
			int middle = left + (right-left)/2;
			
			List<T> returnedLeft = new ArrayList<T>();
			List<T> returnedRight = new ArrayList<T>();
			
			//Do "this" to half of "this" iteration's array.
			returnedLeft = sorting(result, left, middle);
			returnedRight = sorting(result, middle + 1, right);
			
			//Merge "this"'s arrays into each other.
			result = merge(result, left, middle, right);
		}
		
		return result;
	}
	
	private <T extends Comparable<? super T>> List<T> merge(List<T> list, int left, int middle, int right) {
		List<T> result = new ArrayList<T>();
		result.addAll(list);
		
		//Find the sizes of the two sub arrays
		int leftSize = middle - left + 1;
		int rightSize = right - middle;
		
		//Declare two sub arrays
		List<T> leftSubarray = new ArrayList<T>();
		List<T> rightSubarray = new ArrayList<T>();
		
		//Fill the left sub array
		for(int i = 0; i < leftSize; i++)
			leftSubarray.add(i, result.get(left + i));
		
		//Fill the right sub array
		for(int i = 0; i < rightSize; i++)
			rightSubarray.add(i, result.get(middle + 1 + i));
		
		/* Merging */
		//Initial indexes of the left and right sub arrays.
		int leftIndex = 0, rightIndex = 0;
		
		//Initial index of the merged array.
		int mergingIndex = left;
		while(leftIndex < leftSize && rightIndex < rightSize) {
			if(leftSubarray.get(leftIndex).compareTo(rightSubarray.get(rightIndex)) < 0) {
				result.set(mergingIndex, leftSubarray.get(leftIndex));
				leftIndex++;
			} else {
				result.set(mergingIndex, rightSubarray.get(rightIndex));
				rightIndex++;
			}
			mergingIndex++;
		}
		
		//One of the subArray's ran outta stuff.
		//Put the rest of the Left sub array in the product array, (IF ANY)
		while(leftIndex < leftSize) {
			result.set(mergingIndex, leftSubarray.get(leftIndex));
			leftIndex++;
			mergingIndex++;
		}
		//Put the rest of the Right sub array in the product array, (IF ANY)
		while(rightIndex < rightSize) {
			result.set(mergingIndex, rightSubarray.get(rightIndex));
			rightIndex++;
			mergingIndex++;
		}
		
		return result;
	}

}